// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/domain/ports/user_gateways.go
//
// Generated by this command:
//
//	mockgen -source=./internal/domain/ports/user_gateways.go -destination=./internal/domain/ports/mocks/user_gateways_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entities "github.com/lyracampos/go-clean-architecture/internal/domain/entities"
	ports "github.com/lyracampos/go-clean-architecture/internal/domain/ports"
	gomock "go.uber.org/mock/gomock"
)

// MockUserDatabaseGateway is a mock of UserDatabaseGateway interface.
type MockUserDatabaseGateway struct {
	ctrl     *gomock.Controller
	recorder *MockUserDatabaseGatewayMockRecorder
}

// MockUserDatabaseGatewayMockRecorder is the mock recorder for MockUserDatabaseGateway.
type MockUserDatabaseGatewayMockRecorder struct {
	mock *MockUserDatabaseGateway
}

// NewMockUserDatabaseGateway creates a new mock instance.
func NewMockUserDatabaseGateway(ctrl *gomock.Controller) *MockUserDatabaseGateway {
	mock := &MockUserDatabaseGateway{ctrl: ctrl}
	mock.recorder = &MockUserDatabaseGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDatabaseGateway) EXPECT() *MockUserDatabaseGatewayMockRecorder {
	return m.recorder
}

// GetUser mocks base method.
func (m *MockUserDatabaseGateway) GetUser(ctx context.Context, id int64) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, id)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserDatabaseGatewayMockRecorder) GetUser(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserDatabaseGateway)(nil).GetUser), ctx, id)
}

// InsertUser mocks base method.
func (m *MockUserDatabaseGateway) InsertUser(ctx context.Context, user *entities.User) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", ctx, user)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockUserDatabaseGatewayMockRecorder) InsertUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockUserDatabaseGateway)(nil).InsertUser), ctx, user)
}

// ListUser mocks base method.
func (m *MockUserDatabaseGateway) ListUser(ctx context.Context, filter ports.ListUserFilter) ([]*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUser", ctx, filter)
	ret0, _ := ret[0].([]*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUser indicates an expected call of ListUser.
func (mr *MockUserDatabaseGatewayMockRecorder) ListUser(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUser", reflect.TypeOf((*MockUserDatabaseGateway)(nil).ListUser), ctx, filter)
}
